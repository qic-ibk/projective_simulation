# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/lib_nbs/ECMs/00_template_ECM.ipynb.

# %% auto 0
__all__ = ['ECM']

# %% ../../nbs/lib_nbs/ECMs/00_template_ECM.ipynb 1
from sys import version_info

if version_info >= (3, 4):  # compatibility
    from abc import ABC, abstractmethod
    ABC = ABC
else:
    from abc import ABCMeta, abstractmethod
    ABC = ABCMeta('ABC', (), {})

class ECM(ABC):
    """A minimal ECM, every agent should be Derived from this class. Primarily serves to enforce that all ECMs have the "ECM" class

    Examples:
    >>> pass
    """

    @abstractmethod
    def __init__(self, num_actions: int):
        """
        Args:
            ECM: The ECM Object to use
            percept_processor: An optional object for transforming observations prior to passing to ECM as a percept. Must have method "preprocess"
            action_processor: An optional object for transforming actions prior to passing to Environment as an actuator state. Must have method "postprocess"            
        """
        raise NotImplementedError

    @abstractmethod
    def deliberate(self, percept: str):
        """
        Args:
            percept: A string corresponding to an existing or new (will be added) key in the ECM percept dictionary
        """
        raise NotImplementedError
