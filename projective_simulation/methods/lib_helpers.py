# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/lib_nbs/methods/02_lib_helpers.ipynb.

# %% auto 0
__all__ = ['CustomABCMeta']

# %% ../../nbs/lib_nbs/methods/02_lib_helpers.ipynb 2
from abc import ABCMeta


class CustomABCMeta(ABCMeta):
    def __call__(cls, *args, **kwargs):
        # If cls still has abstract methods, build a custom message
        if cls.__abstractmethods__:
            missing = ', '.join(sorted(cls.__abstractmethods__))
            raise TypeError(
                f"Cannot instantiate class {cls.__name__} "
                f"because it is missing method(s): {missing}.\n"
                f"Please implement all abstract methods (see documentation of class for details)."
            )
        # Otherwise, call the normal __call__ to instantiate
        return super().__call__(*args, **kwargs)
