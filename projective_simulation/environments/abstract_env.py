# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/lib_nbs/environments/00_environment_template.ipynb.

# %% auto 0
__all__ = ['PS_Env']

# %% ../../nbs/lib_nbs/environments/00_environment_template.ipynb 1
from sys import version_info

if version_info >= (3, 4):  # compatibility
    from abc import ABC, abstractmethod
    ABC = ABC
else:
    from abc import ABCMeta, abstractmethod
    ABC = ABCMeta('ABC', (), {})

class PS_Env(ABC):
    """A minimal Environment, every environment should be Derived from this class.

    Examples:
    >>> pass
    """

    @abstractmethod
    def __init__(self, 
                 state: object):
        """
        Args:
            state: an object that defines the state of the environment            
        """
        self.state = state

    @abstractmethod
    def transition(self, action):
        """
        Args:
            action: an action (or actions) to process
        """
        raise NotImplementedError

    @abstractmethod
    def get_observation(self):
        """
        should determine and return an observation for an agent or agents as a function of self.state
        """
        raise NotImplementedError
