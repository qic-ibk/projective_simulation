# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/lib_nbs/environments/01_red_light_green_light.ipynb.

# %% auto 0
__all__ = ['RLGL']

# %% ../../nbs/lib_nbs/environments/01_red_light_green_light.ipynb 1
import numpy as np
from .abstract_env import PS_Env

class RLGL(PS_Env):
    def __init__(self, state = 0, transition_matrix = None):
        self.state = state
        self.state_labels = {0: "red", 1: "green"}
        if transition_matrix is None:
            #create random uniform transition probabilities
            transition_matrix = np.array([[0.5,0.5],[0.5,0.5]])
        assert np.shape(transition_matrix) == (2,2)
        self.transition_matrix = transition_matrix            

    def transition(self, action):
        '''
        In this environment the agents action determines the reward but does not determine the state
        '''
        self.state = np.random.choice(range(2), p = self.transition_matrix[self.state,])

    def get_observation(self):
        return self.state_labels[self.state]

    def get_reward(self, action):
        if action == self.state:
            return 1
        else:
            return 0
