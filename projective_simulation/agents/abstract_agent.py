# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/lib_nbs/agents/00_PS_template.ipynb.

# %% auto 0
__all__ = ['PS_Agent']

# %% ../../nbs/lib_nbs/agents/00_PS_template.ipynb 1
from sys import version_info

if version_info >= (3, 4):  # compatibility
    from abc import ABC, abstractmethod
    ABC = ABC
else:
    from abc import ABCMeta, abstractmethod
    ABC = ABCMeta('ABC', (), {})


class PS_Agent(ABC):
    """A minimal class every agent should fullfill, every agent should be Derived from this class

    Examples:
    >>> pass
    """

    @abstractmethod
    def __init__(self, ECM = None, percept_processor = None, action_processor = None):
        """
        Args:
            ECM: The ECM Object to use
            percept_processor: An optional object for transforming observations prior to passing to ECM as a percept. Must have method "preprocess"
            action_processor: An optional object for transforming actions prior to passing to Environment as an actuator state. Must have method "postprocess"            
        """
        self.ECM = ECM
        assert ECM is not None

        self.percept_processor = percept_processor
        if percept_processor is not None:
            assert hasattr(percept_processor, "preproccess")

        self.action_processor = action_processor
        if action_processor is not None:
            assert hassattr(action_processor, "postprocess")

    @abstractmethod
    def update(self, reward, observation):
        """
        Args:
            reward: The reward as float or integer, reward None means skip learning
            observation: data object passed from the environment/sensors
        """
        raise NotImplementedError
    
    @abstractmethod
    def get_action(self, percept):
        """
        Args:
            percept: Data object to be processed by ECM: vector
        Return:
            action
        """
        raise NotImplementedError

