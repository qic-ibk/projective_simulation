"""This notebook gathers the most basic implementation of PS"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/lib_nbs/agents/01_basic_PS.ipynb.

# %% auto 0
__all__ = ['Basic_PSAgent']

# %% ../../nbs/lib_nbs/agents/01_basic_PS.ipynb 2
import numpy as np
from .abstract_PS import PS_Agent
from ..ECMs.two_layer import Two_Layer
from ..methods.preprocessors import get_percept



class Basic_PSAgent(PS_Agent):
    def __init__(self, 
                 ECM = None, #an ECM object is not given, a number of actions must be given with whi
                 num_actions = None, # The number of available actions. If an ECM is not given, should be int
                 glow: float = 0.1, # The glow (or eta) parameter. Won't be used if ECM is given
                 damp: float = 0., # The damping (or gamma) parameter. Won't be used if ECM is given
                 softmax: float = 0.1, # The softmax (or beta) parameter. Won't be used if ECM is given
                 percept_processor = get_percept, 
                 action_processor = None
                ):
        """
        Simple, projective simulation (PS) agent that uses a two-layer ECM. Percepts are added to the ECM as new obsevations are encountered
                      
        NOTE: This simple version misses some features such as clip deletion, emotion tags or generalization mechanisms.
        
        """
        assert isinstance(ECM, Two_Layer) or isinstance(num_actions, int)
        if ECM is None:
            self.ECM = Two_Layer(num_actions, glow, damp, softmax)
        else:
            self.ECM = ECM

        self.percept_processor = percept_processor        
        
        
    def get_action(self, 
                observation: object # .
               )-> int : # The action to be performed.
        """
        Given a percept, returns an action. For basic PS, these processess are mainly executed by the ECM's deliberate function
        """
        percept = self.percept_processor(observation)
        action = self.ECM.deliberate(percept)
        return action

    def update(self, reward):
        """
        Given a reward, updates h-matrix. Updates g-matrix with glow.
        """
        self.ECM.learn(reward)

    

